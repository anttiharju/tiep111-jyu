package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

import kanta.SailoException;

/**
 * Test class made by ComTest
 * @version 2020.04.11 21:23:55 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjailijatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa62 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa62() throws SailoException {    // Kirjailijat: 62
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kir1 = new Kirjailija(), kir2 = new Kirjailija(); 
    assertEquals("From: Kirjailijat line: 66", 0, kirjailijat.getLkm()); 
    kirjailijat.lisaa(kir1); assertEquals("From: Kirjailijat line: 67", 1, kirjailijat.getLkm()); 
    kirjailijat.lisaa(kir2); assertEquals("From: Kirjailijat line: 68", 2, kirjailijat.getLkm()); 
    kirjailijat.lisaa(kir1); assertEquals("From: Kirjailijat line: 69", 3, kirjailijat.getLkm()); 
    Iterator<Kirjailija> it = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 71", kir1, it.next()); 
    assertEquals("From: Kirjailijat line: 72", kir2, it.next()); 
    assertEquals("From: Kirjailijat line: 73", kir1, it.next()); 
    kirjailijat.lisaa(kir1); assertEquals("From: Kirjailijat line: 74", 4, kirjailijat.getLkm()); 
    kirjailijat.lisaa(kir1); assertEquals("From: Kirjailijat line: 75", 5, kirjailijat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista99 
   * @throws SailoException when error
   */
  @Test
  public void testPoista99() throws SailoException {    // Kirjailijat: 99
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kir1 = new Kirjailija(), kir2 = new Kirjailija(), kir3 = new Kirjailija(); 
    kir1.rekisteroi(); kir2.rekisteroi(); kir3.rekisteroi(); 
    int id1 = kir1.getId(); 
    kirjailijat.lisaa(kir1); kirjailijat.lisaa(kir2); kirjailijat.lisaa(kir3); 
    kirjailijat.poista(id1+1); 
    kirjailijat.poista(id1); assertEquals("From: Kirjailijat line: 107", 1, kirjailijat.getLkm()); 
    kirjailijat.poista(id1+3); assertEquals("From: Kirjailijat line: 108", 1, kirjailijat.getLkm()); 
    kirjailijat.poista(id1+2); assertEquals("From: Kirjailijat line: 109", 0, kirjailijat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta154 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta154() throws SailoException {    // Kirjailijat: 154
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija k21 = new Kirjailija(); k21.tayta(2); 
    Kirjailija k11 = new Kirjailija(); k11.tayta(1); 
    Kirjailija k22 = new Kirjailija(); k22.tayta(2); 
    Kirjailija k12 = new Kirjailija(); k12.tayta(1); 
    Kirjailija k23 = new Kirjailija(); k23.tayta(2); 
    String tiedNimi = "tmp_testihylly_kirjailijat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kirjailijat.lueTiedostosta(tiedNimi); 
    fail("Kirjailijat: 166 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjailijat.lisaa(k21); 
    kirjailijat.lisaa(k11); 
    kirjailijat.lisaa(k22); 
    kirjailijat.lisaa(k12); 
    kirjailijat.lisaa(k23); 
    kirjailijat.tallenna(); 
    kirjailijat = new Kirjailijat(); 
    kirjailijat.lueTiedostosta(tiedNimi); 
    Iterator<Kirjailija> i = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 176", k21.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 177", k11.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 178", k22.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 179", k12.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 180", k23.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 181", false, i.hasNext()); 
    kirjailijat.lisaa(k23); 
    kirjailijat.tallenna(); 
    assertEquals("From: Kirjailijat line: 184", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".backup"); 
    assertEquals("From: Kirjailijat line: 186", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator314 */
  @Test
  public void testIterator314() {    // Kirjailijat: 314
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija p12 = new Kirjailija(2); kirjailijat.lisaa(p12); 
    Kirjailija p21 = new Kirjailija(1); kirjailijat.lisaa(p21); 
    Kirjailija p32 = new Kirjailija(2); kirjailijat.lisaa(p32); 
    Kirjailija p41 = new Kirjailija(1); kirjailijat.lisaa(p41); 
    Kirjailija p52 = new Kirjailija(2); kirjailijat.lisaa(p52); 
    Iterator<Kirjailija> i2 = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 326", p12, i2.next()); 
    assertEquals("From: Kirjailijat line: 327", p21, i2.next()); 
    assertEquals("From: Kirjailijat line: 328", p32, i2.next()); 
    assertEquals("From: Kirjailijat line: 329", p41, i2.next()); 
    assertEquals("From: Kirjailijat line: 330", p52, i2.next()); 
    try {
    assertEquals("From: Kirjailijat line: 331", p21, i2.next()); 
    fail("Kirjailijat: 331 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int kidt[] = { 2,1,2,1,2} ; 
    for ( Kirjailija kir : kirjailijat ) {
    assertEquals("From: Kirjailijat line: 337", kidt[n], kir.getId()); n++; 
    }
    assertEquals("From: Kirjailijat line: 340", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKirjailija354 */
  @Test
  public void testAnnaKirjailija354() {    // Kirjailijat: 354
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija pete = new Kirjailija(0); kirjailijat.lisaa(pete); 
    Kirjailija vesa = new Kirjailija(1); kirjailijat.lisaa(vesa); 
    Kirjailija tupu = new Kirjailija(2); kirjailijat.lisaa(tupu); 
    Kirjailija hupu = new Kirjailija(3); kirjailijat.lisaa(hupu); 
    Kirjailija lupu = new Kirjailija(4); kirjailijat.lisaa(lupu); 
    Kirjailija rupu = new Kirjailija(5); kirjailijat.lisaa(rupu); 
    Kirjailija etsitty = new Kirjailija(); 
    etsitty = kirjailijat.annaKirjailija(0); 
    assertEquals("From: Kirjailijat line: 368", true, etsitty == pete); 
    etsitty = kirjailijat.annaKirjailija(1); 
    assertEquals("From: Kirjailijat line: 370", true, etsitty == vesa); 
    etsitty = kirjailijat.annaKirjailija(2); 
    assertEquals("From: Kirjailijat line: 372", true, etsitty == tupu); 
    etsitty = kirjailijat.annaKirjailija(3); 
    assertEquals("From: Kirjailijat line: 374", true, etsitty == hupu); 
    etsitty = kirjailijat.annaKirjailija(4); 
    assertEquals("From: Kirjailijat line: 376", true, etsitty == lupu); 
    etsitty = kirjailijat.annaKirjailija(5); 
    assertEquals("From: Kirjailijat line: 378", true, etsitty == rupu); 
  } // Generated by ComTest END
}