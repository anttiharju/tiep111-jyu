package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.01 11:38:04 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa52 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa52() throws SailoException {    // Kirjat: 52
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    assertEquals("From: Kirjat line: 56", 0, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 57", 1, kirjat.getLkm()); 
    kirjat.lisaa(k2); assertEquals("From: Kirjat line: 58", 2, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 59", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 60", k1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 61", k2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 62", k1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 63", false, kirjat.anna(1) == k1); 
    assertEquals("From: Kirjat line: 64", true, kirjat.anna(1) == k2); 
    try {
    assertEquals("From: Kirjat line: 65", k1, kirjat.anna(3)); 
    fail("Kirjat: 65 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 66", 4, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 67", 5, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 68", 6, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 69", 7, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 70", 8, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 71", 9, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 72", 10, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 73", 11, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta119 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta119() throws SailoException {    // Kirjat: 119
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(); k1.tayta(); 
    Kirja k2 = new Kirja(); k2.tayta(); 
    Kirja k3 = new Kirja(); k3.tayta(); 
    Kirja k4 = new Kirja(); k4.tayta(); 
    Kirja k5 = new Kirja(); k5.tayta(); 
    String tiedNimi = "tmp_testihylly_kirjat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 131 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(k1); 
    kirjat.lisaa(k2); 
    kirjat.lisaa(k3); 
    kirjat.lisaa(k4); 
    kirjat.lisaa(k5); 
    kirjat.tallenna(); 
    kirjat = new Kirjat(); 
    kirjat.lueTiedostosta(tiedNimi); 
    Iterator<Kirja> i = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 141", k1.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 142", k2.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 143", k3.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 144", k4.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 145", k5.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 146", false, i.hasNext()); 
    kirjat.lisaa(k5); 
    kirjat.tallenna(); 
    assertEquals("From: Kirjat line: 149", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".backup"); 
    assertEquals("From: Kirjat line: 151", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator295 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator295() throws SailoException {    // Kirjat: 295
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    k1.rekisteroi(); k2.rekisteroi(); 
    kirjat.lisaa(k1); 
    kirjat.lisaa(k2); 
    kirjat.lisaa(k1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Kirja k:kirjat) // Kokeillaan for-silmukan toimintaa
    ids.append(" " + k.getId()); 
    String tulos = " " + k1.getId() + " " + k2.getId() + " " + k1.getId(); 
    assertEquals("From: Kirjat line: 314", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kirja k = i.next(); 
    ids.append(" " + k.getId()); 
    }
    assertEquals("From: Kirjat line: 322", tulos, ids.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 325", true, i.next() == k1); 
    assertEquals("From: Kirjat line: 326", true, i.next() == k2); 
    assertEquals("From: Kirjat line: 327", true, i.next() == k1); 
    try {
    i.next(); 
    fail("Kirjat: 329 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi388 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi388() throws SailoException {    // Kirjat: 388
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(); k1.parse("1|Ready Player One|1|1|"); 
    Kirja k2 = new Kirja(); k2.parse("2|Metro 2033|2|2|"); 
    Kirja k3 = new Kirja(); k3.parse("3|What if?|3|3|"); 
    Kirja k4 = new Kirja(); k4.parse("4|Metro 2035|2|4|"); 
    Kirja k5 = new Kirja(); k5.parse("5|Diaspora|4|5|"); 
    kirjat.lisaa(k1); kirjat.lisaa(k2); kirjat.lisaa(k3); kirjat.lisaa(k4); kirjat.lisaa(k5); 
  } // Generated by ComTest END
}