package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.03.28 14:48:37 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjailijatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta51 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta51() throws SailoException {    // Kirjailijat: 51
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija k21 = new Kirjailija(); k21.tayta(2); 
    Kirjailija k11 = new Kirjailija(); k11.tayta(1); 
    Kirjailija k22 = new Kirjailija(); k22.tayta(2); 
    Kirjailija k12 = new Kirjailija(); k12.tayta(1); 
    Kirjailija k23 = new Kirjailija(); k23.tayta(2); 
    String tiedNimi = "tmp_testihylly"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kirjailijat.lueTiedostosta(tiedNimi); 
    fail("Kirjailijat: 63 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjailijat.lisaa(k21); 
    kirjailijat.lisaa(k11); 
    kirjailijat.lisaa(k22); 
    kirjailijat.lisaa(k12); 
    kirjailijat.lisaa(k23); 
    kirjailijat.tallenna(); 
    kirjailijat = new Kirjailijat(); 
    kirjailijat.lueTiedostosta(tiedNimi); 
    Iterator<Kirjailija> i = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 73", k21.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 74", k11.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 75", k22.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 76", k12.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 77", k23.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 78", false, i.hasNext()); 
    kirjailijat.lisaa(k23); 
    kirjailijat.tallenna(); 
    assertEquals("From: Kirjailijat line: 81", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".backup"); 
    assertEquals("From: Kirjailijat line: 83", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator202 */
  @Test
  public void testIterator202() {    // Kirjailijat: 202
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija p12 = new Kirjailija(2); kirjailijat.lisaa(p12); 
    Kirjailija p21 = new Kirjailija(1); kirjailijat.lisaa(p21); 
    Kirjailija p32 = new Kirjailija(2); kirjailijat.lisaa(p32); 
    Kirjailija p41 = new Kirjailija(1); kirjailijat.lisaa(p41); 
    Kirjailija p52 = new Kirjailija(2); kirjailijat.lisaa(p52); 
    Iterator<Kirjailija> i2 = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 214", p12, i2.next()); 
    assertEquals("From: Kirjailijat line: 215", p21, i2.next()); 
    assertEquals("From: Kirjailijat line: 216", p32, i2.next()); 
    assertEquals("From: Kirjailijat line: 217", p41, i2.next()); 
    assertEquals("From: Kirjailijat line: 218", p52, i2.next()); 
    try {
    assertEquals("From: Kirjailijat line: 219", p21, i2.next()); 
    fail("Kirjailijat: 219 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int kidt[] = { 2,1,2,1,2} ; 
    for ( Kirjailija kir : kirjailijat ) {
    assertEquals("From: Kirjailijat line: 225", kidt[n], kir.getId()); n++; 
    }
    assertEquals("From: Kirjailijat line: 228", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKirjailija242 */
  @Test
  public void testAnnaKirjailija242() {    // Kirjailijat: 242
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija pete = new Kirjailija(0); kirjailijat.lisaa(pete); 
    Kirjailija vesa = new Kirjailija(1); kirjailijat.lisaa(vesa); 
    Kirjailija tupu = new Kirjailija(2); kirjailijat.lisaa(tupu); 
    Kirjailija hupu = new Kirjailija(3); kirjailijat.lisaa(hupu); 
    Kirjailija lupu = new Kirjailija(4); kirjailijat.lisaa(lupu); 
    Kirjailija rupu = new Kirjailija(5); kirjailijat.lisaa(rupu); 
    Kirjailija etsitty = new Kirjailija(); 
    etsitty = kirjailijat.annaKirjailija(0); 
    assertEquals("From: Kirjailijat line: 256", true, etsitty == pete); 
    etsitty = kirjailijat.annaKirjailija(1); 
    assertEquals("From: Kirjailijat line: 258", true, etsitty == vesa); 
    etsitty = kirjailijat.annaKirjailija(2); 
    assertEquals("From: Kirjailijat line: 260", true, etsitty == tupu); 
    etsitty = kirjailijat.annaKirjailija(3); 
    assertEquals("From: Kirjailijat line: 262", true, etsitty == hupu); 
    etsitty = kirjailijat.annaKirjailija(4); 
    assertEquals("From: Kirjailijat line: 264", true, etsitty == lupu); 
    etsitty = kirjailijat.annaKirjailija(5); 
    assertEquals("From: Kirjailijat line: 266", true, etsitty == rupu); 
  } // Generated by ComTest END
}