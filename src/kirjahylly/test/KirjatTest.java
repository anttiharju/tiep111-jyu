package kirjahylly.test;
// Generated by ComTest BEGIN
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.03.27 17:23:04 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa42 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa42() throws SailoException {    // Kirjat: 42
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    assertEquals("From: Kirjat line: 46", 0, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 47", 1, kirjat.getLkm()); 
    kirjat.lisaa(k2); assertEquals("From: Kirjat line: 48", 2, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 49", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 50", k1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 51", k2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 52", k1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 53", false, kirjat.anna(1) == k1); 
    assertEquals("From: Kirjat line: 54", true, kirjat.anna(1) == k2); 
    try {
    assertEquals("From: Kirjat line: 55", k1, kirjat.anna(3)); 
    fail("Kirjat: 55 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 56", 4, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 57", 5, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 58", 6, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 59", 7, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 60", 8, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 61", 9, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 62", 10, kirjat.getLkm()); 
    try {
    kirjat.lisaa(k1); 
    fail("Kirjat: 63 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator237 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator237() throws SailoException {    // Kirjat: 237
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    k1.rekisteroi(); k2.rekisteroi(); 
    kirjat.lisaa(k1); 
    kirjat.lisaa(k2); 
    kirjat.lisaa(k1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Kirja k:kirjat) // Kokeillaan for-silmukan toimintaa
    ids.append(" " + k.getId()); 
    String tulos = " " + k1.getId() + " " + k2.getId() + " " + k1.getId(); 
    assertEquals("From: Kirjat line: 256", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kirja k = i.next(); 
    ids.append(" " + k.getId()); 
    }
    assertEquals("From: Kirjat line: 264", tulos, ids.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 267", true, i.next() == k1); 
    assertEquals("From: Kirjat line: 268", true, i.next() == k2); 
    assertEquals("From: Kirjat line: 269", true, i.next() == k1); 
    try {
    i.next(); 
    fail("Kirjat: 271 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi330 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi330() throws SailoException {    // Kirjat: 330
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(); k1.parse("1|Ankka Aku|030201-115H|Paratiisitie 13|"); 
    Kirja k2 = new Kirja(); k2.parse("2|Ankka Tupu||030552-123B|"); 
    Kirja k3 = new Kirja(); k3.parse("3|Susi Sepe|121237-121V||131313|Perämetsä"); 
    Kirja k4 = new Kirja(); k4.parse("4|Ankka Iines|030245-115V|Ankkakuja 9"); 
    Kirja k5 = new Kirja(); k5.parse("5|Ankka Roope|091007-408U|Ankkakuja 12"); 
    kirjat.lisaa(k1); kirjat.lisaa(k2); kirjat.lisaa(k3); kirjat.lisaa(k4); kirjat.lisaa(k5); 
  } // Generated by ComTest END
}