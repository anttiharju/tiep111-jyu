package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

import kanta.SailoException;

/**
 * Test class made by ComTest
 * @version 2020.04.11 19:01:17 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa71 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa71() throws SailoException {    // Kirjat: 71
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    assertEquals("From: Kirjat line: 75", 0, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 76", 1, kirjat.getLkm()); 
    kirjat.lisaa(k2); assertEquals("From: Kirjat line: 77", 2, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 78", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 79", k1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 80", k2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 81", k1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 82", false, kirjat.anna(1) == k1); 
    assertEquals("From: Kirjat line: 83", true, kirjat.anna(1) == k2); 
    try {
    assertEquals("From: Kirjat line: 84", k1, kirjat.anna(3)); 
    fail("Kirjat: 84 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 85", 4, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 86", 5, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 87", 6, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 88", 7, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 89", 8, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 90", 9, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 91", 10, kirjat.getLkm()); 
    kirjat.lisaa(k1); assertEquals("From: Kirjat line: 92", 11, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista119 
   * @throws SailoException when error
   */
  @Test
  public void testPoista119() throws SailoException {    // Kirjat: 119
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(), k3 = new Kirja(); 
    k1.rekisteroi(); k2.rekisteroi(); k3.rekisteroi(); 
    int id1 = k1.getId(); 
    kirjat.lisaa(k1); kirjat.lisaa(k2); kirjat.lisaa(k3); 
    assertEquals("From: Kirjat line: 126", 1, kirjat.poista(id1+1)); 
    assertEquals("From: Kirjat line: 127", 1, kirjat.poista(id1)); assertEquals("From: Kirjat line: 127", 1, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 128", 0, kirjat.poista(id1+3)); assertEquals("From: Kirjat line: 128", 1, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId169 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId169() throws SailoException {    // Kirjat: 169
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(), k3 = new Kirja(); 
    k1.rekisteroi(); k2.rekisteroi(); k3.rekisteroi(); 
    int id1 = k1.getId(); 
    kirjat.lisaa(k1); kirjat.lisaa(k2); kirjat.lisaa(k3); 
    assertEquals("From: Kirjat line: 176", 1, kirjat.etsiId(id1+1)); 
    assertEquals("From: Kirjat line: 177", 2, kirjat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta222 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta222() throws SailoException {    // Kirjat: 222
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(); k1.tayta(); 
    Kirja k2 = new Kirja(); k2.tayta(); 
    Kirja k3 = new Kirja(); k3.tayta(); 
    Kirja k4 = new Kirja(); k4.tayta(); 
    Kirja k5 = new Kirja(); k5.tayta(); 
    String tiedNimi = "tmp_testihylly_kirjat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 234 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(k1); 
    kirjat.lisaa(k2); 
    kirjat.lisaa(k3); 
    kirjat.lisaa(k4); 
    kirjat.lisaa(k5); 
    kirjat.tallenna(); 
    kirjat = new Kirjat(); 
    kirjat.lueTiedostosta(tiedNimi); 
    Iterator<Kirja> i = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 244", k1.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 245", k2.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 246", k3.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 247", k4.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 248", k5.toString(), i.next().toString()); 
    assertEquals("From: Kirjat line: 249", false, i.hasNext()); 
    kirjat.lisaa(k5); 
    kirjat.tallenna(); 
    assertEquals("From: Kirjat line: 252", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".backup"); 
    assertEquals("From: Kirjat line: 254", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator398 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator398() throws SailoException {    // Kirjat: 398
    Kirjat kirjat = new Kirjat(); 
    Kirja k1 = new Kirja(), k2 = new Kirja(); 
    k1.rekisteroi(); k2.rekisteroi(); 
    kirjat.lisaa(k1); 
    kirjat.lisaa(k2); 
    kirjat.lisaa(k1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Kirja k:kirjat) // Kokeillaan for-silmukan toimintaa
    ids.append(" " + k.getId()); 
    String tulos = " " + k1.getId() + " " + k2.getId() + " " + k1.getId(); 
    assertEquals("From: Kirjat line: 417", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kirja k = i.next(); 
    ids.append(" " + k.getId()); 
    }
    assertEquals("From: Kirjat line: 425", tulos, ids.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 428", true, i.next() == k1); 
    assertEquals("From: Kirjat line: 429", true, i.next() == k2); 
    assertEquals("From: Kirjat line: 430", true, i.next() == k1); 
    try {
    i.next(); 
    fail("Kirjat: 432 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}