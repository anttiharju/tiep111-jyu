package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.03.28 14:59:08 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KustantajatTest {


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta51 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta51() throws SailoException {    // Kustantajat: 51
    Kustantajat kustantajat = new Kustantajat(); 
    Kustantaja k21 = new Kustantaja(); k21.tayta(2); 
    Kustantaja k11 = new Kustantaja(); k11.tayta(1); 
    Kustantaja k22 = new Kustantaja(); k22.tayta(2); 
    Kustantaja k12 = new Kustantaja(); k12.tayta(1); 
    Kustantaja k23 = new Kustantaja(); k23.tayta(2); 
    String tiedNimi = "tmp_testihylly"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kustantajat.lueTiedostosta(tiedNimi); 
    fail("Kustantajat: 63 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kustantajat.lisaa(k21); 
    kustantajat.lisaa(k11); 
    kustantajat.lisaa(k22); 
    kustantajat.lisaa(k12); 
    kustantajat.lisaa(k23); 
    kustantajat.tallenna(); 
    kustantajat = new Kustantajat(); 
    kustantajat.lueTiedostosta(tiedNimi); 
    Iterator<Kustantaja> i = kustantajat.iterator(); 
    assertEquals("From: Kustantajat line: 73", k21.toString(), i.next().toString()); 
    assertEquals("From: Kustantajat line: 74", k11.toString(), i.next().toString()); 
    assertEquals("From: Kustantajat line: 75", k22.toString(), i.next().toString()); 
    assertEquals("From: Kustantajat line: 76", k12.toString(), i.next().toString()); 
    assertEquals("From: Kustantajat line: 77", k23.toString(), i.next().toString()); 
    assertEquals("From: Kustantajat line: 78", false, i.hasNext()); 
    kustantajat.lisaa(k23); 
    kustantajat.tallenna(); 
    assertEquals("From: Kustantajat line: 81", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".backup"); 
    assertEquals("From: Kustantajat line: 83", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator202 */
  @Test
  public void testIterator202() {    // Kustantajat: 202
    Kustantajat kustantajat = new Kustantajat(); 
    Kustantaja p12 = new Kustantaja(2); kustantajat.lisaa(p12); 
    Kustantaja p21 = new Kustantaja(1); kustantajat.lisaa(p21); 
    Kustantaja p32 = new Kustantaja(2); kustantajat.lisaa(p32); 
    Kustantaja p41 = new Kustantaja(1); kustantajat.lisaa(p41); 
    Kustantaja p52 = new Kustantaja(2); kustantajat.lisaa(p52); 
    Iterator<Kustantaja> i2 = kustantajat.iterator(); 
    assertEquals("From: Kustantajat line: 214", p12, i2.next()); 
    assertEquals("From: Kustantajat line: 215", p21, i2.next()); 
    assertEquals("From: Kustantajat line: 216", p32, i2.next()); 
    assertEquals("From: Kustantajat line: 217", p41, i2.next()); 
    assertEquals("From: Kustantajat line: 218", p52, i2.next()); 
    try {
    assertEquals("From: Kustantajat line: 219", p21, i2.next()); 
    fail("Kustantajat: 219 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Kustantaja kus : kustantajat ) {
    assertEquals("From: Kustantajat line: 225", jnrot[n], kus.getId()); n++; 
    }
    assertEquals("From: Kustantajat line: 228", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKustantaja242 */
  @Test
  public void testAnnaKustantaja242() {    // Kustantajat: 242
    Kustantajat kustantajat = new Kustantajat(); 
    Kustantaja pete = new Kustantaja(0); kustantajat.lisaa(pete); 
    Kustantaja vesa = new Kustantaja(1); kustantajat.lisaa(vesa); 
    Kustantaja tupu = new Kustantaja(2); kustantajat.lisaa(tupu); 
    Kustantaja hupu = new Kustantaja(3); kustantajat.lisaa(hupu); 
    Kustantaja lupu = new Kustantaja(4); kustantajat.lisaa(lupu); 
    Kustantaja rupu = new Kustantaja(5); kustantajat.lisaa(rupu); 
    Kustantaja etsitty = new Kustantaja(); 
    etsitty = kustantajat.annaKustantaja(0); 
    assertEquals("From: Kustantajat line: 256", true, etsitty == pete); 
    etsitty = kustantajat.annaKustantaja(1); 
    assertEquals("From: Kustantajat line: 258", true, etsitty == vesa); 
    etsitty = kustantajat.annaKustantaja(2); 
    assertEquals("From: Kustantajat line: 260", true, etsitty == tupu); 
    etsitty = kustantajat.annaKustantaja(3); 
    assertEquals("From: Kustantajat line: 262", true, etsitty == hupu); 
    etsitty = kustantajat.annaKustantaja(4); 
    assertEquals("From: Kustantajat line: 264", true, etsitty == lupu); 
    etsitty = kustantajat.annaKustantaja(5); 
    assertEquals("From: Kustantajat line: 266", true, etsitty == rupu); 
  } // Generated by ComTest END
}